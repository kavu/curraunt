// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: curraunt.go
// DO NOT EDIT!

package curraunt

import (
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *response) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *response) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"base":`)
	fflib.WriteJsonString(buf, string(mj.Base))
	buf.WriteString(`,"amount":`)
	fflib.AppendFloat(buf, float64(mj.Amount), 'g', -1, 64)
	buf.WriteString(`,"date":`)
	fflib.WriteJsonString(buf, string(mj.Date))
	if mj.Rates == nil {
		buf.WriteString(`,"rates":null`)
	} else {
		buf.WriteString(`,"rates":{ `)
		for key, value := range mj.Rates {
			fflib.WriteJsonString(buf, string(key))
			buf.WriteString(`:`)
			fflib.AppendFloat(buf, float64(value), 'g', -1, 64)
			buf.WriteByte(',')
		}
		buf.Rewind(1)
		buf.WriteByte('}')
	}
	buf.WriteByte('}')
	return nil
}
